var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useEffect, useState } from "react";
import { useField, useFormikContext } from "formik";
import { FormGroup, FormText } from "reactstrap";
import { CheckBox } from "./CheckBox";
import { TextInput } from "./TextInput";
import "./styles.min.css";
export var InputField = function (_a) {
    var type = _a.type, props = __rest(_a, ["type"]);
    var _b = useField(props), field = _b[0], meta = _b[1];
    var status = useFormikContext().status;
    var error = meta.error, touched = meta.touched;
    var _c = useState(error || (status && status[props.name]) || null), errorText = _c[0], setErrorText = _c[1];
    useEffect(function () {
        if (error) {
            setErrorText(error || (status && status[props.name]));
        }
        else {
            setErrorText("");
        }
    }, [error, props.name, status]);
    return (React.createElement(FormGroup, { className: "position-relative", check: type === "checkbox" },
        type === "checkbox" ? (React.createElement(CheckBox, __assign({ type: type }, props, field))) : (React.createElement(TextInput, __assign({ type: type }, props, field))),
        touched && errorText ? (React.createElement(FormText, { color: "danger" }, errorText)) : null));
};
