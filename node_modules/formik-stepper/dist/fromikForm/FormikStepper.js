var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import React, { Fragment, useState } from "react";
import { Form, Formik } from "formik";
import { Stepper, Step } from "../stepper";
import { FormikButtons } from "./index";
export var FormikStepper = function (_a) {
    var children = _a.children, nextBtnLabel = _a.nextBtnLabel, prevBtnLabel = _a.prevBtnLabel, submitBtnLabel = _a.submitBtnLabel, nextBtnColor = _a.nextBtnColor, prevBtnColor = _a.prevBtnColor, submitBtnColor = _a.submitBtnColor, labelsColor = _a.labelsColor, withStepperLine = _a.withStepperLine, props = __rest(_a, ["children", "nextBtnLabel", "prevBtnLabel", "submitBtnLabel", "nextBtnColor", "prevBtnColor", "submitBtnColor", "labelsColor", "withStepperLine"]);
    var _b = useState(0), step = _b[0], setStep = _b[1];
    var withLine = withStepperLine ? withStepperLine : false;
    var childrenArray = React.Children.toArray(children);
    var currentChield = childrenArray[step];
    ////// GET All Fields Names which is in FormikStepper Component
    var getNames = function (parent) {
        var names = [];
        var childrenArray = React.Children.toArray(parent.props.children);
        if (parent.props.name) {
            return parent.props.name;
        }
        if (childrenArray && childrenArray.length > 0) {
            for (var i = 0; i < childrenArray.length; i++) {
                var newNames = getNames(childrenArray[i]);
                if (Array.isArray(newNames)) {
                    names = __spreadArrays(names, newNames);
                }
                else {
                    names = __spreadArrays(names, [newNames]);
                }
            }
            return names;
        }
        return null;
    };
    /// validation form
    /// If there is an error in any check field, you will be alerted with the danger color
    var validate = function (_a) {
        var errors = _a.errors, setTouched = _a.setTouched, setFieldError = _a.setFieldError;
        if (errors && Object.keys(errors).length > 0) {
            var valid = true;
            var obj = {};
            var names = getNames(currentChield);
            for (var i = 0; i < names.length; i++) {
                var nameField = names[i];
                for (var key in errors) {
                    if (key === nameField) {
                        valid = false;
                        obj[key] = errors[key];
                    }
                    else {
                        setFieldError(key, "");
                    }
                }
            }
            if (valid) {
                setTouched({});
                return true;
            }
            else {
                setTouched(obj);
                return false;
            }
        }
        else {
            setTouched({});
            return true;
        }
    };
    return (React.createElement(Fragment, null,
        React.createElement(Formik, __assign({}, props), function (_a) {
            var setSubmitting = _a.setSubmitting, submitForm = _a.submitForm, validateForm = _a.validateForm, setTouched = _a.setTouched, setFieldError = _a.setFieldError;
            return (React.createElement(Form, null,
                withLine && (React.createElement("div", { className: "d-flex" },
                    React.createElement(Stepper, { activeStep: step }, childrenArray.map(function (child, index) {
                        var _a = child.props, label = _a.label, withIcons = _a.withIcons, withNumbers = _a.withNumbers, circleColor = _a.circleColor, iconColor = _a.iconColor;
                        return (React.createElement(Step, { key: index, withIcons: withIcons, withNumbers: withNumbers, circleColor: circleColor, iconColor: iconColor, labelColor: labelsColor }, label));
                    })))),
                currentChield,
                React.createElement(FormikButtons, { nextBtnLabel: nextBtnLabel, prevBtnLabel: prevBtnLabel, submitBtnLabel: submitBtnLabel, nextBtnColor: nextBtnColor, prevBtnColor: prevBtnColor, submitBtnColor: submitBtnColor, step: step, childrenLength: childrenArray.length, setStep: setStep, setTouched: setTouched, validate: validate, validateForm: validateForm, submitForm: submitForm, setSubmitting: setSubmitting, setFieldError: setFieldError })));
        })));
};
